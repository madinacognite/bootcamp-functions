---
name: Deploy Functions to CDF project using OIDC
on:
  push:
    branches: [master]

jobs:
  generate-matrix:
    uses: "./.github/workflows/generate-matrix.yaml"
    with:
      deploy_folders: >-
        (
        "execute_csv_extractor_assets"  
        "execute_csv_extractor_timeseries"
        "execute_rest_extractor"    
        )
      trigger_deploy_all_folders: >-
        (
        "common"
        )

  # deploy:
  #   needs: generate-matrix
  #   name: Deploy to Cognite Functions
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       function: ${{ fromJson(needs.generate-matrix.outputs.folders) }}
  #       # Add environments to deploy to.
  #       # Each environment should have a corresponding github environment with secrets.
  #       environment:
  #         - test
 

  deploy:
    name: Deploy to Cognite Functions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        function:
          - execute_csv_extractor_assets
          - execute_csv_extractor_timeseries
          - execute_rest_extractor
    
    steps:
      - uses: actions/checkout@v3.1.0
        # if: ${{ contains(needs.generate-matrix.outputs.deploy_folders, matrix.function) }}

      - name: Extract service name
        # if: ${{ contains(needs.generate-matrix.outputs.deploy_folders, matrix.function) }}
        shell: bash
        run: |
          name=$(echo ${GITHUB_REF#refs/heads/} | sed -e s/_/-/g)
          under_name=$(echo ${GITHUB_REF#refs/heads/} | sed -e s/-/_/g)
          echo "name=${name}" >> $GITHUB_OUTPUT
          echo "under_name=${under_name}" >> $GITHUB_OUTPUT
        id: extract_name

      - name: Resolve secrets
        # if: ${{ contains(needs.generate-matrix.outputs.deploy_folders, matrix.function) }}
        shell: bash
        env:
          BRANCH: ${{ steps.extract_name.outputs.under_name }}
        # Secret names should contain branch name with hyphens (if applicable)
        run: |
          echo "deployment_secret=deploy_${BRANCH}" >> $GITHUB_OUTPUT
          echo "schedules_secret=schedules_${BRANCH}" >> $GITHUB_OUTPUT
          echo "extra_secret=secrets_${{ matrix.function }}_${BRANCH}" >> $GITHUB_OUTPUT
        id: extract_secrets

      - name: Install yq
        # if: ${{ contains(needs.generate-matrix.outputs.deploy_folders, matrix.function) }}
        run: |
            sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.27.5/yq_linux_amd64
            sudo chmod +x /usr/local/bin/yq
      - name: Extract config file parameters
        # if: ${{ contains(needs.generate-matrix.outputs.deploy_folders, matrix.function) }}
        shell: bash
        run: |
          FILE="${{ matrix.function }}/function_config.yaml"
          if [ ! -f $FILE ]; then
              echo "Config: $FILE not supplied!"
          else
              ALLKEYS=$(yq -o=tsv "keys" $FILE)
              for CONFIGURATION in $ALLKEYS
              do
                  VALUE=$(yq -o=json -I=0 ".$CONFIGURATION" $FILE | sed -e 's/^"//' -e 's/"$//')
                  echo "${CONFIGURATION}=${VALUE}" >> $GITHUB_OUTPUT
              done
          fi
        id: extract_params


    # environment: ${{ matrix.environment }}

    # steps:
    #   - uses: actions/checkout@v3.1.0
    #     # if: ${{ contains(needs.generate-matrix.outputs.deploy_folders, matrix.function) }}

    #   - name: Extract branch name
    #     # if: ${{ contains(needs.generate-matrix.outputs.deploy_folders, matrix.function) }}
    #     shell: bash
    #     run: echo branch=${GITHUB_REF#refs/heads/} >> $GITHUB_OUTPUT
    #     id: extract_branch

    #   - name: Install yq
    #     if: ${{ contains(needs.generate-matrix.outputs.deploy_folders, matrix.function) }}
    #     run: |
    #       sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.27.5/yq_linux_amd64
    #       sudo chmod +x /usr/local/bin/yq

    #   - name: Extract config file parameters
    #     if: ${{ contains(needs.generate-matrix.outputs.deploy_folders, matrix.function) }}
    #     shell: bash
    #     run: |
    #       CONFIG_FILES=(" common/function_config_${{ matrix.environment }}.yaml " \
    #         "${{ matrix.function }}/function_config.yaml " \
    #         "${{ matrix.function }}/function_config_${{ matrix.environment }}.yaml ")
    #       echo "Config files to use are ${CONFIG_FILES[@]}"
    #       for FILE in ${CONFIG_FILES[@]}
    #       do
    #         echo $FILE
    #         if [ ! -f $FILE ]; then
    #             echo "Config: $FILE not supplied!"
    #         else
    #             ALLKEYS=$(yq -o=tsv "keys" $FILE)
    #             for CONFIGURATION in $ALLKEYS
    #             do
    #                 VALUE=$(yq -o=json -I=0 ".$CONFIGURATION" $FILE | sed -e 's/^"//' -e 's/"$//')
    #                 echo $CONFIGURATION=$VALUE >> $GITHUB_OUTPUT
    #             done
    #         fi
    #       done
    #     id: extract_params

    #   - name: Extra secrets
    #     if: ${{ contains(needs.generate-matrix.outputs.deploy_folders, matrix.function) }}
    #     shell: bash
    #     # Secret name should be EXTRA_SECRETS_{function name} (if applicable)
    #     run: |
    #       echo "extra_secrets_name=EXTRA_SECRETS_${{ matrix.function }}" >> $GITHUB_OUTPUT
    #     id: extract_secrets

      # - name: Deploy and schedule ${{matrix.function }}
      #   if: ${{ contains(needs.generate-matrix.outputs.deploy_folders, matrix.function) }}
      #   uses: cognitedata/function-action-oidc@v1
      #   with:
      #     # Parameters you may likely hardcode here directly:
      #     runtime: py39
      #     # Parameters we can read/extract automatically:
      #     function_folder: ${{ matrix.function }}
      #     function_external_id: ${{ matrix.function }}-${{ steps.extract_branch.outputs.branch }}
      #     schedule_file: schedules/${{ matrix.environment }}.yaml
      #     # Parameters we get from Github secret storage:
      #     deployment_client_id: ${{ secrets.DEPLOYMENT_CLIENT_ID }}
      #     deployment_client_secret: ${{secrets.DEPLOYMENT_CLIENT_SECRET }}
      #     schedules_client_id: ${{ secrets.SCHEDULE_CLIENT_ID }}
      #     schedules_client_secret: ${{ secrets.SCHEDULE_CLIENT_SECRET }}
      #     function_secrets: ${{ secrets[steps.extract_secrets.outputs.extra_secrets_name] }}
      #     # Individual parameters per function we read from 'common/functions_config_[environment].yaml', 'function_config.yaml' and 'function_config_[environment].yaml:
      #     cdf_project: ${{ steps.extract_params.outputs.cdf_project }}
      #     cdf_cluster: ${{ steps.extract_params.outputs.cdf_cluster }}
      #     data_set_id: ${{ steps.extract_params.outputs.data_set_id }}
      #     schedules_tenant_id: ${{ steps.extract_params.outputs.tenant_id }}
      #     deployment_tenant_id: ${{ steps.extract_params.outputs.tenant_id }}
      #     common_folder: ${{ steps.extract_params.outputs.common_folder }}
      #     function_deploy_timeout: ${{ steps.extract_params.outputs.function_deploy_timeout }}
      #     post_deploy_cleanup: ${{ steps.extract_params.outputs.post_deploy_cleanup }}
      #     description: ${{ steps.extract_params.outputs.description }}
      #     owner: ${{ steps.extract_params.outputs.owner }}
      #     env_vars: ${{ steps.extract_params.outputs.env_vars }}
      #     metadata: ${{ steps.extract_params.outputs.metadata }}

      - name: Deploy and schedule ${{ matrix.function }}
        uses: cognitedata/function-action-oidc@v1
        with:
          # Parameters you may likely hardcode here directly:
          deployment_client_id: 76cbe02f-905b-4ad8-a768-1ad66f105208
          deployment_tenant_id: 16e3985b-ebe8-4e24-9da4-933e21a9fc81
          schedules_client_id: 76cbe02f-905b-4ad8-a768-1ad66f105208
          schedules_tenant_id: 16e3985b-ebe8-4e24-9da4-933e21a9fc81
          cdf_project: bootcamp-03-test
          cdf_cluster: greenfield
          data_set_id: 505192792434293
          runtime: py38
          # Parameters we can read/extract automatically:
          function_folder: ${{ matrix.function }}
          function_external_id: ${{ format('{0}_{1}', matrix.function, steps.extract_name.outputs.name) }}
          schedule_file: schedules/${{steps.extract_name.outputs.name}}.yaml
          # Parameters we get from Github secret storage:
          deployment_client_secret: ${{ secrets[steps.extract_secrets.outputs.deployment_secret] }}
          schedules_client_secret: ${{ secrets[steps.extract_secrets.outputs.schedules_secret] }}
          # function_secrets: ${{ secrets[steps.extract_secrets.outputs.extra_secret] }}
          # Individual parameters per function we read from 'function_config.yaml':
          common_folder: ${{ steps.extract_params.outputs.common_folder }}
          function_deploy_timeout: ${{ steps.extract_params.outputs.function_deploy_timeout }}
          post_deploy_cleanup: ${{ steps.extract_params.outputs.post_deploy_cleanup }}
          description: ${{ steps.extract_params.outputs.description }}
          owner: ${{ steps.extract_params.outputs.owner }}
          cpu: ${{ steps.extract_params.outputs.cpu }}
          memory: ${{ steps.extract_params.outputs.memory }}
          env_vars: ${{ steps.extract_params.outputs.env_vars }}

